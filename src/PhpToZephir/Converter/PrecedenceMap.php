<?php

return [
    // [precedence, associativity] where for the latter -1 is %left, 0 is %nonassoc and 1 is %right
    'Expr_BinaryOp_Pow' => [0, 1],
    'Expr_BitwiseNot' => [1, 1],
    'Expr_PreInc' => [1, 1],
    'Expr_PreDec' => [1, 1],
    'Expr_PostInc' => [1, -1],
    'Expr_PostDec' => [1, -1],
    'Expr_UnaryPlus' => [1, 1],
    'Expr_UnaryMinus' => [1, 1],
    'Expr_Cast_Int' => [1, 1],
    'Expr_Cast_Double' => [1, 1],
    'Expr_Cast_String' => [1, 1],
    'Expr_Cast_Array' => [1, 1],
    'Expr_Cast_Object' => [1, 1],
    'Expr_Cast_Bool' => [1, 1],
    'Expr_Cast_Unset' => [1, 1],
    'Expr_ErrorSuppress' => [1, 1],
    'Expr_Instanceof' => [2, 0],
    'Expr_BooleanNot' => [3, 1],
    'Expr_BinaryOp_Mul' => [4, -1],
    'Expr_BinaryOp_Div' => [4, -1],
    'Expr_BinaryOp_Mod' => [4, -1],
    'Expr_BinaryOp_Plus' => [5, -1],
    'Expr_BinaryOp_Minus' => [5, -1],
    'Expr_BinaryOp_Concat' => [5, -1],
    'Expr_BinaryOp_ShiftLeft' => [6, -1],
    'Expr_BinaryOp_ShiftRight' => [6, -1],
    'Expr_BinaryOp_Smaller' => [7, 0],
    'Expr_BinaryOp_SmallerOrEqual' => [7, 0],
    'Expr_BinaryOp_Greater' => [7, 0],
    'Expr_BinaryOp_GreaterOrEqual' => [7, 0],
    'Expr_BinaryOp_Equal' => [8, 0],
    'Expr_BinaryOp_NotEqual' => [8, 0],
    'Expr_BinaryOp_Identical' => [8, 0],
    'Expr_BinaryOp_NotIdentical' => [8, 0],
    'Expr_BinaryOp_BitwiseAnd' => [9, -1],
    'Expr_BinaryOp_BitwiseXor' => [10, -1],
    'Expr_BinaryOp_BitwiseOr' => [11, -1],
    'Expr_BinaryOp_BooleanAnd' => [12, -1],
    'Expr_BinaryOp_BooleanOr' => [13, -1],
    'Expr_Ternary' => [14, -1],
    // parser uses %left for assignments, but they really behave as %right
    'Expr_Assign' => [15, 1],
    'Expr_AssignRef' => [15, 1],
    'Expr_AssignOp_Plus' => [15, 1],
    'Expr_AssignOp_Minus' => [15, 1],
    'Expr_AssignOp_Mul' => [15, 1],
    'Expr_AssignOp_Div' => [15, 1],
    'Expr_AssignOp_Concat' => [15, 1],
    'Expr_AssignOp_Mod' => [15, 1],
    'Expr_AssignOp_BitwiseAnd' => [15, 1],
    'Expr_AssignOp_BitwiseOr' => [15, 1],
    'Expr_AssignOp_BitwiseXor' => [15, 1],
    'Expr_AssignOp_ShiftLeft' => [15, 1],
    'Expr_AssignOp_ShiftRight' => [15, 1],
    'Expr_AssignOp_Pow' => [15, 1],
    'Expr_BinaryOp_LogicalAnd' => [16, -1],
    'Expr_BinaryOp_LogicalXor' => [17, -1],
    'Expr_BinaryOp_LogicalOr' => [18, -1],
    'Expr_Include' => [19, -1],
];
